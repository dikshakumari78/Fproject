#include <iostream>
#include <thread>
#include <vector>
#include <queue>
#include <functional>
#include <mutex>
#include <condition_variable>
#include <atomic>
#include <chrono>

// Task structure (using std::function for flexibility)
using Task = std::function<void()>;

// Thread pool class
class ThreadPool {
public:
    ThreadPool(size_t numThreads);
    ~ThreadPool();

    void addTask(Task task);
    void stop();

private:
    void workerThread();

    std::vector<std::thread> workers;
    std::queue<Task> tasks;
    std::mutex queueMutex;
    std::condition_variable condition;
    std::atomic<bool> stopFlag;
};

// Constructor: Initialize threads
ThreadPool::ThreadPool(size_t numThreads) : stopFlag(false) {
    for(size_t i = 0; i < numThreads; ++i) {
        workers.emplace_back(&ThreadPool::workerThread, this);
    }
}

// Destructor: Stop threads and clean up
ThreadPool::~ThreadPool() {
    stop();
    for(std::thread &worker : workers) {
        if(worker.joinable()) {
            worker.join();
        }
    }
}

// Add a task to the queue
void ThreadPool::addTask(Task task) {
    {
        std::unique_lock<std::mutex> lock(queueMutex);
        tasks.emplace(std::move(task));
    }
    condition.notify_one();
}

// Stop the thread pool
void ThreadPool::stop() {
    stopFlag.store(true);
    condition.notify_all();
}

// Worker thread function
void ThreadPool::workerThread() {
    while(true) {
        Task task;
        {
            std::unique_lock<std::mutex> lock(queueMutex);
            condition.wait(lock, [this]{ return stopFlag.load() || !tasks.empty(); });

            if(stopFlag.load() && tasks.empty()) {
                return;
            }

            task = std::move(tasks.front());
            tasks.pop();
        }
        task();
    }
}

// Example task function
void exampleTask(int num) {
    std::cout << "Task " << num << " is being processed.\n";
    std::this_thread::sleep_for(std::chrono::seconds(1)); // Simulate task processing
}

int main() {
    ThreadPool pool(4); // Create a thread pool with 4 threads

    for(int i = 1; i <= 10; ++i) {
        pool.addTask([i] { exampleTask(i); });
    }

    std::this_thread::sleep_for(std::chrono::seconds(5)); // Wait for tasks to complete
    pool.stop(); // Stop the pool
    return 0;
}
